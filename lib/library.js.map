{"version":3,"sources":["webpack://library/webpack/universalModuleDefinition","webpack://library/webpack/bootstrap","webpack://library/./src/FieldComponent.jsx","webpack://library/./src/FormProvider.jsx","webpack://library/./src/basic-inputs/BasicCheckBox.jsx","webpack://library/./src/basic-inputs/BasicInput.jsx","webpack://library/./src/basic-inputs/BasicRadioButton.jsx","webpack://library/./src/basic-inputs/BasicSelect.jsx","webpack://library/./src/basic-inputs/BasicTextarea.jsx","webpack://library/./src/basic-inputs/index.js","webpack://library/./src/customComponents.jsx","webpack://library/./src/index.js","webpack://library/./src/utils/combineArrays.js","webpack://library/./src/utils/index.js","webpack://library/./src/utils/isObjectsEqual.js","webpack://library/./src/utils/logger.js","webpack://library/external \"react\""],"names":["helpLink_formBoundaries","FieldComponent","props","_getDomProps","bind","_formLink","_getFormState","_getFieldState","_setFieldState","_initializeFieldState","_getValueErrors","_validate","_invalidateValue","_shouldFieldUpdate","_fireOnReady","_fireOnFocusChange","_fireOnValidChange","_getInitialValue","getDefaultValue","getDomProps","handleChangeEvent","handleFocusEvent","handleBlurEvent","getFieldState","getFieldValue","setFieldValue","_setFieldValue","touched","nextProps","nextState","propsToCompare","children","stateChanged","__currentState","propsChanged","childrenChanged","fieldName","formLink","errorShown","console","error","constructor","name","formProps","getFormState","onBlur","onChange","onFocus","cb","Object","assign","onStateChange","value","errors","focused","dirty","valid","length","oldState","formState","invalidator","result","onValidate","fieldState","nextErrors","initialValues","nextValue","disabled","event","onShouldUpdate","onReady","onFocusChange","onValidChange","cleanProps","target","React","Component","defaultProps","FormContext","createContext","FormProvider","state","formBuffer","blocked","_getFormStateOf","_setFormState","_handleChange","_setFieldsAttribute","_blocked","_getFormStateNormilized","_valuesToBuffer","_reset","_invalidateForm","_fireOnFormReady","_formProvider","reset","setFieldState","invalidateForm","setBlocked","errorsObject","keys","forEach","el","newValue","setState","fields","attributName","defaultValue","propsList","i","nextFormState","onFormReady","attrName","values","nextFieldState","JSON","stringify","other","newState","_otherProps","Connect","render","BasicCheckBox","BasicInput","type","BasicRadioButton","BasicSelect","BasicTextarea","BasicSwitch","BasicRadioSwitch","Input","Select","CheckBox","RadioButton","Textarea","Switch","RadioSwitch","combineArrays","errorsBuffer","newErrors","concat","indexOf","errId","push","isObjectsEqual","logger","x","y","undefined","Function","RegExp","valueOf","Array","isArray","Date","p","every","logStyle","params","log"],"mappings":"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","file":"library.js","sourcesContent":["(function webpackUniversalModuleDefinition(root, factory) {\n\tif(typeof exports === 'object' && typeof module === 'object')\n\t\tmodule.exports = factory(require(\"react\"));\n\telse if(typeof define === 'function' && define.amd)\n\t\tdefine(\"library\", [\"react\"], factory);\n\telse if(typeof exports === 'object')\n\t\texports[\"library\"] = factory(require(\"react\"));\n\telse\n\t\troot[\"library\"] = factory(root[\"react\"]);\n})(window, function(__WEBPACK_EXTERNAL_MODULE_react__) {\nreturn "," \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId]) {\n \t\t\treturn installedModules[moduleId].exports;\n \t\t}\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\ti: moduleId,\n \t\t\tl: false,\n \t\t\texports: {}\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.l = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// define getter function for harmony exports\n \t__webpack_require__.d = function(exports, name, getter) {\n \t\tif(!__webpack_require__.o(exports, name)) {\n \t\t\tObject.defineProperty(exports, name, { enumerable: true, get: getter });\n \t\t}\n \t};\n\n \t// define __esModule on exports\n \t__webpack_require__.r = function(exports) {\n \t\tif(typeof Symbol !== 'undefined' && Symbol.toStringTag) {\n \t\t\tObject.defineProperty(exports, Symbol.toStringTag, { value: 'Module' });\n \t\t}\n \t\tObject.defineProperty(exports, '__esModule', { value: true });\n \t};\n\n \t// create a fake namespace object\n \t// mode & 1: value is a module id, require it\n \t// mode & 2: merge all properties of value into the ns\n \t// mode & 4: return value when already ns object\n \t// mode & 8|1: behave like require\n \t__webpack_require__.t = function(value, mode) {\n \t\tif(mode & 1) value = __webpack_require__(value);\n \t\tif(mode & 8) return value;\n \t\tif((mode & 4) && typeof value === 'object' && value && value.__esModule) return value;\n \t\tvar ns = Object.create(null);\n \t\t__webpack_require__.r(ns);\n \t\tObject.defineProperty(ns, 'default', { enumerable: true, value: value });\n \t\tif(mode & 2 && typeof value != 'string') for(var key in value) __webpack_require__.d(ns, key, function(key) { return value[key]; }.bind(null, key));\n \t\treturn ns;\n \t};\n\n \t// getDefaultExport function for compatibility with non-harmony modules\n \t__webpack_require__.n = function(module) {\n \t\tvar getter = module && module.__esModule ?\n \t\t\tfunction getDefault() { return module['default']; } :\n \t\t\tfunction getModuleExports() { return module; };\n \t\t__webpack_require__.d(getter, 'a', getter);\n \t\treturn getter;\n \t};\n\n \t// Object.prototype.hasOwnProperty.call\n \t__webpack_require__.o = function(object, property) { return Object.prototype.hasOwnProperty.call(object, property); };\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(__webpack_require__.s = \"./src/index.js\");\n","import React from 'react'\nimport {\n  isObjectsEqual,\n  combineArrays,\n} from './utils'\n\n// eslint-disable-next-line camelcase\nconst helpLink_formBoundaries = 'http://example.com'\n\n/**\n * Properties:\n *\n * formLink={...}\n * type='password'\n * fieldName={'password'}\n * disabled\n * onReady={ (inputRef)=>{ this.inputRef = inputRef } }\n * onValidate={ (value, errors, formState, invalidator)=>['error1', 'eerror2'] }\n * onShouldUpdate={(nextState,formState)=>true}\n * onFocusChange={(fieldState, fieldName)=>console.log('onFocusChange', fieldName, {fieldState})}\n * onValidChange={(fieldState, fieldName)=>console.log('onValidChange', fieldName, {fieldState})}\n * onStateChange={(fieldState, fieldName)=>console.log('onStateChange', fieldName, {fieldState})}\n */\nexport class FieldComponent extends React.Component {\n\n  constructor( props ){\n    super( props )\n\n    // log = logger.bind( this )\n    // log( 'constructor', { props })\n\n    // ## Internally used, protected, methods.\n\n    this._getDomProps = this._getDomProps.bind( this )\n    // Returns a set of properties cleaned from unacceptable/specific items.\n\n    this._formLink = this._formLink.bind( this )\n    // Used to get access to `formLink`.\n\n    this._getFormState = this._getFormState.bind( this )\n    // Used to get `formState`.\n\n    this._getFieldState = this._getFieldState.bind( this )\n    this._setFieldState = this._setFieldState.bind( this )\n    // Used to get and set the field state.\n\n    this._initializeFieldState = this._initializeFieldState.bind( this )\n    // Used to set up all of the field properties while construction or reinitialization (cancel).\n\n    this._getValueErrors = this._getValueErrors.bind( this )\n    // Validate a value with external validators, returns an array of errors.\n\n    this._validate = this._validate.bind( this )\n    // Calls `_getValueErrors` with the current context (field state and etc.).\n\n    this._invalidateValue = this._invalidateValue.bind( this )\n    // Takes a value and an error array of it. If the value is actual, errors are applied to it. Used in async validation.\n\n    this._shouldFieldUpdate = this._shouldFieldUpdate.bind( this )\n    // Uses `onShouldUpdate` handler to check if the nextState can be applied or not.\n\n    this._fireOnReady = this._fireOnReady.bind(this)\n\n    this._fireOnFocusChange = this._fireOnFocusChange.bind( this )\n    // Fires `onFocusChange` if the handler is given, when necessary.\n\n    this._fireOnValidChange = this._fireOnValidChange.bind( this )\n    // Fires `onValidChange` if the handler is given, when necessary.\n\n    this._getInitialValue = this._getInitialValue.bind( this )\n    // Calculates initial value based on the initialization value and control's default value.\n\n    // ## Controls API\n\n    this.getDefaultValue = this.getDefaultValue.bind( this )\n    // Return default value of the control. Override it to change the value for all of the cases.\n\n    this.getDomProps = this._getDomProps\n    // Returns a set of properties cleaned from unacceptable/specific items. Override it when you need to filter out some additionsl properties.\n\n    this.handleChangeEvent = this.handleChangeEvent.bind( this )\n    // Used to handle standard onChange event\n\n    this.handleFocusEvent = this.handleFocusEvent.bind( this )\n    // Used to handle standard onFocus event\n\n    this.handleBlurEvent = this.handleBlurEvent.bind( this )\n    // Used to handle standard onBlur event\n\n    this.getFieldState = this._getFieldState\n    // Used to get full field state\n\n    this.getFieldValue = this.getFieldValue.bind( this )\n    this.setFieldValue = this._setFieldValue.bind( this )\n    // Used to get and set field values\n\n    this._initializeFieldState(this._fireOnReady)\n  }\n\n  componentWillReceiveProps(){\n    // If the field was 'canceled' - reinitialize it\n    const { touched } = this._getFieldState()\n    if( typeof touched === 'undefined' ){\n      this._initializeFieldState()\n    }\n  }\n\n  shouldComponentUpdate( nextProps, nextState ){\n    return true\n    // KARD: experimental, Eliminate superfluous renders with shouldComponentUpdate.\n    // Ensure that the input is re-rendered only when its value changed.\n    const propsToCompare = ( props ) => {\n      const { children, ...propsToCompare } = this._getDomProps( props )\n      return propsToCompare\n    }\n    const stateChanged = !isObjectsEqual( this.__currentState, this._getFieldState())\n    const propsChanged = !isObjectsEqual( propsToCompare( this.props ), propsToCompare( nextProps ))\n    const childrenChanged = this.props.children != nextProps.children\n    return stateChanged || propsChanged || childrenChanged\n  }\n\n  // ## [1] Internally used, protected, methods\n  // ------------------------------------------\n\n  /**\n   * The only method to get formLink of the FormProvider\n   * @return {Object} - formLink or its emulator\n   */\n  _formLink(){\n    if( this.props.fieldName\n      && this.props.formLink\n      && !isObjectsEqual( this.props.formLink, {})\n    ){ return this.props.formLink }\n\n    if( !this.errorShown ){\n      console.error(\n        `${this.constructor.name} must be used in bounds of FormProvider. `\n        // eslint-disable-next-line camelcase\n        + `Visit ${helpLink_formBoundaries} to learn more about the form boundaries.`\n      )\n      this.errorShown = true\n    }\n\n    const formLink = {\n      formProps    : {},\n      getFormState : () => { return {} },\n      onBlur       : () => {},\n      onChange     : () => {},\n      onFocus      : () => {},\n    }\n    return formLink\n  }\n\n  _getFormState(){\n    return this._formLink().getFormState()\n  }\n\n  /**\n   * The only way to get field state from the form\n   * @return {Object} - filed buffer\n   */\n  _getFieldState(){\n    // * get the state from form buffer or generate the empty state\n    return this._getFormState()[this.props.fieldName] || {}\n  }\n\n  /**\n   * The only way to set field state\n   * @param {Object} nextState - the state to set\n   */\n  _setFieldState( nextState, cb ){\n    this._formLink().onChange(\n      this.props.fieldName,\n      nextState,\n      () => {\n        // Store the new field state for further usage in shouldComponentUpdate\n        this.__currentState = Object.assign({}, nextState )\n\n        // Fire onChange event if a handler given\n        if( this.props.onStateChange ){ this.props.onStateChange( nextState, this.props.fieldName ) }\n\n        if( cb ){ cb() }\n      }\n    )\n  }\n\n  /**\n   * Is used by constructor to fill all of the field's attributes to defaults\n   */\n  _initializeFieldState(cb){\n    const value = this._getInitialValue()\n\n    // Get errors if any for the value we have\n    const errors = this._getValueErrors(\n      value,\n      [],\n      this._getFormState(),\n      this._invalidateValue\n    )\n\n    // Combine next state of field\n    const nextState = {\n      value,\n      errors,                          // Errors codes/massages of the field validation.\n      focused : false,\n      dirty   : false,                 // The control's value has changed.\n      touched : false,                 // The control has been visited\n      valid   : errors.length === 0,   // The control's value is valid.\n    }\n\n    // Store preserved value for further check. It is 'undefined' if the componant\n    // is just created or contains some value in onCancel flow.\n    const oldState = this.__currentState\n\n    this._setFieldState( nextState, () => {\n      if( cb ){ cb(nextState) }\n      // If we are in 'cancel' flow and valid value is changed, fire the event.\n      if( typeof oldState === 'undefined' ){ return }\n      if( oldState.valid !== nextState.valid ){\n        this._fireOnValidChange( nextState )\n      }\n    })\n  }\n\n  /**\n   * _getValueErrors returns array of errors for the given value\n   * @param  {Any} value - value to test\n   * @param  {Array} errors - the current list of errors\n   * @param  {Object} formState - the current form state\n   * @param  {Function} invalidator - async invalidator (see _invalidateValue)\n   * @return {Array} - updated array of errors\n   */\n  _getValueErrors( value, errors, formState, invalidator ){\n    const result = this.props.onValidate\n      ? this.props.onValidate(\n        value, errors, formState, invalidator\n      ) : []\n    return result\n  }\n\n  /**\n   * _invalidate is used to set invalid field state and add some errors to to\n   * the state for a specific value. If field's value is different from the one\n   * gitven in the parameters, nothing happans. Usually used to invalidate the\n   * field after an asynchronic check.\n   * @param  {[type]} value - the original value to be invalidated\n   * @param  {Array}  errors - errors (id/massages) to add\n   * @return {Void}\n   */\n  _invalidateValue( value, errors = []){\n    const fieldState = this._getFieldState()\n\n    // If the field value is not relevant or there are no errors in array, just return\n    if(\n      ( fieldState.value !== value )\n      || ( errors.length === 0 )\n    ){ return }\n\n\n    // Add only errors are not in the list yet\n    const nextErrors = combineArrays( fieldState.errors || [], errors )\n\n    // Update field's state with new errors\n    const nextState = {\n      ...fieldState,\n      valid  : nextErrors.length === 0,\n      errors : nextErrors,\n    }\n\n    this._setFieldState( nextState, () => {\n      if( fieldState.valid !== nextState.valid ){\n        this._fireOnValidChange( nextState )\n      }\n    })\n  }\n\n  /**\n   * _validate executes a call of this._getFieldState(...) within the current context.\n   * @param  {Any} value - a value to test\n   * @return {Array} - array if errors for the given value\n   */\n  _validate( value ){\n    const errors = this._getValueErrors(\n      value,\n      this._getFieldState().errors,\n      this._getFormState(),\n      this._invalidateValue\n    )\n    return errors\n  }\n\n\n  /**\n   * _getInitialValue returns initial value of the field extracted from formLink\n   * @return {Any} - initial value of the field\n   */\n  _getInitialValue(){\n    const { formProps } = this._formLink()\n    return formProps\n      && formProps.initialValues\n      && typeof formProps.initialValues[this.props.fieldName] !== 'undefined'\n      ? formProps.initialValues[this.props.fieldName]\n      : this.getDefaultValue()\n  }\n\n  /**\n   * _setFieldValue is used to set the field value and set all of the value related\n   * flags: errors, dirty, valid\n   * @param {Amy}   newValue - a value to set\n   * @param {Function} cb - callback to call after the value is set\n   */\n  _setFieldValue( nextValue, cb ){\n    // if the control is disabled, do nothing\n    if( this.props.disabled ){ return }\n\n    // extract next value from event\n    // const nextValue = event.target.value;\n\n    // validate the next value\n    const nextErrors = this._validate( nextValue )\n\n    const fieldState = this._getFieldState()\n\n    // validate it and put into nextState\n    const nextState = {\n      ...fieldState,\n      value  : nextValue,\n      errors : nextErrors,\n      dirty  : nextValue !== this._getInitialValue(),   // The control's value has changed.\n      valid  : nextErrors.length === 0,                 // The control's value is valid.\n    }\n\n    // test if the nextState should be set, return if no\n    if( !this._shouldFieldUpdate( nextState )){ return }\n\n    // set the new field state\n    this._setFieldState(\n      nextState,\n      () => {\n        // Handle valid changed event is valid property of the states are different\n        if( fieldState.valid !== nextState.valid ){\n          this._fireOnValidChange( nextState )\n        }\n\n        // Fire onChange event if a handler given\n        if( this.props.onChange ){ this.props.onChange( event ) }\n\n        if( cb ){ cb() }\n      }\n    )\n  }\n\n  /**\n   * Fired onShouldUpdate and return its value or true\n   * @param  {Object} nextState - field state to check\n   * @return {[type]} - true when the nextState should be set, false in other case\n   */\n  _shouldFieldUpdate( nextState ){\n    if( this.props.onShouldUpdate ){\n      return this.props.onShouldUpdate(\n        nextState,\n        this._getFormState(),\n      )\n    }\n    return true\n  }\n\n  _fireOnReady(){\n    const { onReady } = this.props\n    if( onReady ) onReady( this )\n  }\n\n  _fireOnFocusChange( fieldState ){\n    if( this.props.onFocusChange ){\n      this.props.onFocusChange( fieldState, this.props.fieldName )\n    }\n  }\n\n  _fireOnValidChange( fieldState ){\n    if( this.props.onValidChange ){\n      this.props.onValidChange( fieldState, this.props.fieldName )\n    }\n  }\n\n  _getDomProps(){\n    const {\n\n      fieldName,\n      formLink,\n      onReady,\n      onFocusChange,\n      onShouldUpdate,\n      onValidate,\n      onValidChange,\n      onStateChange,\n\n      ...cleanProps\n    } = this.props\n    return cleanProps\n  }\n\n  // ## [2] Controls API\n  // -------------------------------------\n\n  getDefaultValue(){\n    return '' // text, password\n  }\n\n  getFieldValue(){\n    return this._getFieldState().value\n  }\n\n  handleChangeEvent( event ){\n    this._setFieldValue( event.target.value )\n  }\n\n  handleFocusEvent( event ){\n    const fieldState = this._getFieldState()\n    const nextState = {\n      ...fieldState,\n      focused : true,\n      touched : true,\n    }\n\n    this._setFieldState(\n      nextState,\n      () => {\n        // Fire onFocus event if a handler given\n        if( this.props.onFocus ){\n          this.props.onFocus( event )\n        }\n\n        // Fire onFocusChanged. It's posible to get here without\n        // field focus state changed for radio buttons.\n        if( fieldState.focused !== nextState.focused ){\n          this._fireOnFocusChange( nextState )\n        }\n\n        // Fire form's onFocus event\n        this._formLink().onFocus(\n          this.props.fieldName,\n          nextState,\n        )\n      }\n    )\n  }\n\n  handleBlurEvent( event ){\n    const fieldState = this._getFieldState()\n    const nextState = {\n      ...fieldState,\n      focused : false,\n    }\n\n    this._setFieldState(\n      nextState,\n      () => {\n        // Fire onBlur event if a handler given\n        if( this.props.onBlur ){\n          this.props.onBlur( event )\n        }\n\n        // Fire onFocusChanged. It's posible to get here without\n        // field focus state changed for radio buttons.\n        if( fieldState.focused !== nextState.focused ){\n          this._fireOnFocusChange( nextState )\n        }\n\n        // Fire form's onFocus event\n        this._formLink().onBlur(\n          this.props.fieldName,\n          nextState,\n        )\n      }\n    )\n  }\n\n}\n\n// --------------------------------------------------------------------------\n\nFieldComponent.defaultProps = {\n  formLink : null,\n}\n","import React from 'react'\nimport {\n  isObjectsEqual,\n  combineArrays,\n} from './utils'\n\n// TODO: (kard) list:\n// [x] form invalidator (to use with submit errors)\n// [x] check whole form state (touched, valid, dirty)\n// [-] filter out unneccesary attributes on submit (remine only values?)\n// [x] should submitting form block its changes?\n// [ ] onFocus & onBlur of the form\n\nconst FormContext = React.createContext({})\n// https://reactjs.org/docs/context.html#api\n\n/**\n * Properties:\n * onFormReady=(formLink)=>{...}\n * onChange=(newState)=>{...}\n * onFocus\n * onBlur\n */\nexport class FormProvider extends React.Component {\n\n  state = { formBuffer: {}, blocked: false }\n\n  constructor( props ){\n    super( props )\n\n    // Bindings\n    // log = logger.bind( this )\n\n    this._getFieldState = this._getFieldState.bind( this )\n    // Returns a field state by its name.\n\n    this._setFieldState = this._setFieldState.bind( this )\n    // Set a field's state by its name\n\n    this._getFormStateOf = this._getFormStateOf.bind( this )\n    // Used to get summarized attribute of the form (dirty, value, touched, focused, etc.).  Tests all fields for attributName === defaultValue. Returns defaultValue if all of the tests are true, other case returns the first difference value met.\n\n    this._getFormState = this._getFormState.bind( this )\n    this._setFormState = this._setFormState.bind( this )\n\n    this._handleChange = this._handleChange.bind( this )\n    // Process any field changes\n\n    this._setFieldsAttribute = this._setFieldsAttribute.bind( this )\n    // Set a named attribute of each field from a values object\n\n    this._blocked = this._blocked.bind( this )\n    // Used in formProvider to set/release block outside the form\n\n    this._getFormStateNormilized = this._getFormStateNormilized.bind( this )\n    // Used to generate the form's extended state supplied to formProvider.getFormState\n\n    this._valuesToBuffer = this._valuesToBuffer.bind( this )\n    // Set value of each field from a value object.\n\n    this._reset = this._reset.bind( this )\n    // Reset form buffer to it's initial state.\n\n    this._invalidateForm = this._invalidateForm.bind( this )\n    // Apply errors from error object to fields.\n\n    this._fireOnFormReady = this._fireOnFormReady.bind( this )\n    // Wrapper for onFormReady event hander call.\n\n    // Loading initial values from initialValues property to formBuffer\n    this.state.formBuffer = this._valuesToBuffer( this.props.initialValues || {})\n\n    // log( 'constructor', { formBuffer: this.state.formBuffer })\n\n    // Provides all 'out of the form' API\n    this._formProvider = {\n      reset          : this._reset,\n      getFormState   : this._getFormStateNormilized,\n      getFieldState  : this._getFieldState,\n      setFieldState  : this._setFieldState,\n      invalidateForm : this._invalidateForm,\n      setBlocked     : this._blocked,\n    }\n\n    // Firing onFormReady event\n    this._fireOnFormReady()\n  }\n\n  // formLink methods\n  // ================\n\n  _invalidateForm( errorsObject ){\n    const formBuffer = { ...this._getFormState() }\n\n    Object.keys( errorsObject ).forEach( el => {\n      formBuffer[el] = {\n        ...formBuffer[el],\n        valid  : false,\n        errors : combineArrays( formBuffer[el].errors || [], errorsObject[el]),\n      }\n    })\n\n    this._setFormState( formBuffer )\n  }\n\n  /**\n   * Reset form values to their initials (from initState property)\n   */\n  _reset( cb ){\n    this._setFormState( this._valuesToBuffer( this.props.initialValues || {}), cb )\n  }\n\n  _getFormState(){\n    return this.state.formBuffer\n  }\n\n  _blocked( newValue = null ){\n    // If no value given, return the current state.\n    if( newValue === null ){ return this.state.blocked }\n\n    // Set the given state for block and return this value.\n    this.setState({ ...this.state, blocked: newValue })\n    return newValue\n  }\n\n  _getFormStateNormilized(){\n    return {\n      fields  : this._getFormState(),\n      touched : this._getFormStateOf( 'touched', false ),\n      valid   : this._getFormStateOf( 'valid', true ),\n      dirty   : this._getFormStateOf( 'dirty', false ),\n      focused : this._getFormStateOf( 'focused', false ),\n      blocked : this._blocked(),\n    }\n  }\n\n  /**\n   * Tests all fields for attributName === defaultValue. Returns defaultValue if all of the tests are true, other case returns the first difference value met.\n   * @param  {string}  attributName - name of the attribute to test\n   * @param  {Boolean} defaultValue - default value of the attribute\n   * @return {Boolean} - default or opposite value (summarized value of the field)\n   */\n  _getFormStateOf( attributName, defaultValue = true ){\n    let result = defaultValue\n    const formState = this._getFormState()\n    const propsList = Object.keys( formState )\n\n    for( let i = propsList.length - 1; i >= 0; i-- ){\n      if( formState[propsList[i]][attributName] !== defaultValue ){\n        result = formState[propsList[i]][attributName]\n        break\n      }\n    }\n\n    return result\n  }\n\n  _setFormState( nextFormState, cb ){\n    this.setState({ formBuffer: nextFormState }, () => {\n      if( cb ){ cb() }\n      if( this.props.onChange ){\n        this.props.onChange( this.state.formBuffer )\n      }\n    })\n  }\n\n  // == end of formLink methods\n\n  _fireOnFormReady(){\n    const { onFormReady } = this.props\n    if( onFormReady ) onFormReady( this._formProvider )\n  }\n\n  // Takes an object within { fieldName: attrValue } pairs and the attribute name.\n  // Assigns each attribute to the named field inside the form buffer. Makes it in the only setState.\n  _setFieldsAttribute( attrName, values ){\n    const formBuffer = { ...this._getFormState() }\n\n    Object.keys( values ).forEach( el => {\n      formBuffer[el] = { ...formBuffer[el], [attrName]: values[el] }\n    })\n\n    this._setFormState( formBuffer )\n  }\n\n  _valuesToBuffer( values ){\n    const formBuffer = {}\n\n    Object.keys( values ).forEach( el => {\n      formBuffer[el] = { value: values[el] }\n    })\n\n    return formBuffer\n  }\n\n  _getFieldState( fieldName ){\n    return this.state.formBuffer[fieldName]\n  }\n\n  _setFieldState( fieldName, nextFieldState, cb ){\n    this._setFormState({ ...this.state.formBuffer, [fieldName]: nextFieldState }, cb )\n  }\n\n  /**\n   * _handleChange is calling each time when some field of the form is changed.\n   * It uses `formBuffer` and field's name and status to combine next form value\n   * and pass it to the form's `onChange` handler if it exists.\n   * @param  {string} fieldName\n   * @param  {object} fieldStatus\n   * @return {void}\n   */\n  _handleChange( fieldName, nextFieldState, cb ){\n    // If the form is not blocked and not in the initialization\n    if( this.state.blocked\n      && nextFieldState.touched !== false // it is true while initializing only\n    ){ return }\n\n    if( JSON.stringify( nextFieldState ) === JSON.stringify( this._getFieldState( fieldName ))) return\n\n    this._setFieldState( fieldName, nextFieldState, cb )\n  }\n\n  /**\n   * _otherProps is used to get a properties set cleaned from the form-specific\n   * properties which are used as separate `formLink` fields., suitable to place\n   * them to the `formProps` field of the `formLink`.\n   * @param  {object} props - a set of properties are passed to the form provider.\n   * @return {object} - a set of the properties cleaned.\n   */\n  _otherProps( props ){\n    const { onChange, children, formBuffer, ...other } = props\n    return other\n  }\n\n  /**\n   * `render` is only used to render the component's children in the context of the\n   * `formLink` structure which contains all of the necessary form-wide fields.\n   * @return {Component}\n   */\n  render(){\n    const formLink = {\n    // This formLink will be passed to each field and used for all under the hood communications.\n\n      getFormState : () => this.state.formBuffer,\n\n      // * `onChange( nextValues )` is calling on each form field change. `nextValue`\n      // is the next state of the form.\n      onChange : this._handleChange,\n      onFocus  : ( fieldName, newState ) => { if( this.props.onFocus ){ this.props.onFocus( fieldName, newState ) } },\n      onBlur   : ( fieldName, newState ) => { if( this.props.onBlur ){ this.props.onBlur( fieldName, newState ) } },\n\n      // * `formProps` contains all of the form's properties except `children` and\n      // those used by FormProvider itself. See also `_otherProps`.\n      formProps : { ...this._otherProps( this.props ) },\n\n    }\n\n    return (\n      <FormContext.Provider value={formLink}>\n        {this.props.children}\n      </FormContext.Provider>\n    )\n  }\n\n}\n\n/**\n * HOC which is used to convert Basic Input Components to those connected to the form's context.\n * @param  {Component} FormComponent - one of the Basic Input Components.\n * @return {Component} - Connected to the form's context Component.\n */\nexport const Connect = FormComponent =>\n  class extends React.Component {\n\n    render = () => {\n      return (\n        <FormContext.Consumer>\n          { formLink => <FormComponent {...this.props} formLink={formLink} /> }\n        </FormContext.Consumer>\n      )\n    }\n\n  }\n","import React from 'react'\nimport { FieldComponent } from 'FieldComponent'\n\nexport class BasicCheckBox extends FieldComponent {\n\n  getDefaultValue(){\n    return false\n  }\n\n  handleChangeEvent( event ){\n    if( this.props.disabled ){ return }\n    this.setFieldValue( !this.getFieldValue())\n  }\n\n  render(){\n    return (\n      <input {...this.getDomProps()}\n        type='checkbox'\n        name={this.props.fieldName}\n        checked={this.getFieldValue() || false}\n        onChange={this.handleChangeEvent}\n        onBlur={this.handleBlurEvent}\n        onFocus={this.handleFocusEvent}\n      />\n    )\n  }\n\n}\n","import React from 'react'\nimport { FieldComponent } from 'FieldComponent'\n\nexport class BasicInput extends FieldComponent {\n\n  render(){\n    return (\n      <input {...this.getDomProps()}\n        type={this.props.type || 'text'}\n        value={this.getFieldValue() || ''}\n        onChange={this.handleChangeEvent}\n        onBlur={this.handleBlurEvent}\n        onFocus={this.handleFocusEvent}\n      />\n    )\n  }\n\n}\n","import React from 'react'\nimport { FieldComponent } from 'FieldComponent'\n\nexport class BasicRadioButton extends FieldComponent {\n\n  getDefaultValue(){\n    return ''\n  }\n\n  handleChangeEvent(){\n    if( this.props.disabled ){ return }\n    this.setFieldValue( this.props.value )\n  }\n\n  render(){\n    return (\n      <input {...this.getDomProps()}\n        type='radio'\n        name={this.props.fieldName}\n        checked={this.getFieldValue() === this.props.value}\n        onChange={this.handleChangeEvent}\n        onBlur={this.handleBlurEvent}\n        onFocus={this.handleFocusEvent}\n      />\n    )\n  }\n\n}\n","import React from 'react'\nimport { FieldComponent } from 'FieldComponent'\n\nexport class BasicSelect extends FieldComponent {\n\n  render(){\n    return (\n      <select {...this.getDomProps()}\n        value={this.getFieldValue()}\n        onChange={this.handleChangeEvent}\n        onBlur={this.handleBlurEvent}\n        onFocus={this.handleFocusEvent}\n      >{ this.props.children }\n      </select>\n    )\n  }\n\n}\n","import React from 'react'\nimport { FieldComponent } from 'FieldComponent'\n\nexport class BasicTextarea extends FieldComponent {\n\n  render(){\n    return (\n      <textarea {...this.getDomProps()}\n        value={this.getFieldValue() || ''}\n        onChange={this.handleChangeEvent}\n        onBlur={this.handleBlurEvent}\n        onFocus={this.handleFocusEvent}\n      />\n    )\n  }\n\n}\n","export { BasicInput } from './BasicInput'\nexport { BasicCheckBox } from './BasicCheckBox'\nexport { BasicRadioButton } from './BasicRadioButton'\nexport { BasicSelect } from './BasicSelect'\nexport { BasicTextarea } from './BasicTextarea'\n","/**\n * We need custom components in different special cases. The most famous of them is stylization of radio-buttons and check-boxes.\n */\nimport React from 'react'\nimport { FieldComponent } from './FieldComponent'\n\nimport { BasicCheckBox, BasicRadioButton, BasicSelect } from 'basic-inputs'\n/**\n * [x] Input Type Radio\n * [x] Input Type Checkbox\n * [x] Input Type Text ( Password/Color )\n * [x] HTML5 Input Types\n *    [x] color\n *    [x] date\n *    [x] datetime-local\n *    [x] email\n *    [x] month\n *    [x] number\n *    [x] range\n *    [x] search\n *    [x] tel\n *    [x] time\n *    [x] url\n *    [x] week\n * [x] name -> fieldName\n * [x] FormComponent & move to context\n * [e] Eliminate superfluous renders with shouldComponentUpdate.\n * [x] onBlur, onFocus form-wide events\n * [x] validation\n * [x] onBlur validation\n * [x] async validation\n * [ ] setFocus\n */\n\n// ==========================================================================\n\nexport class BasicSwitch extends BasicCheckBox {\n  render(){\n    return (\n      <div\n        { ...this.getDomProps() }\n        tabIndex='-1'\n        onClick={ this.handleChangeEvent }\n        onBlur={ this.handleBlurEvent }\n        onFocus={ this.handleFocusEvent }\n      >{ this.props.children }</div>\n    )\n  }\n}\n\nexport class BasicRadioSwitch extends BasicRadioButton {\n  render(){\n    return (\n      <div\n        { ...this.getDomProps() }\n        tabIndex='-1'\n        onClick={ this.handleChangeEvent }\n        onBlur={ this.handleBlurEvent }\n        onFocus={ this.handleFocusEvent }\n      >{ this.props.children }</div>\n    )\n  }\n}\n","import React from 'react'\n\nimport { Connect } from './FormProvider'\nimport { BasicSwitch, BasicRadioSwitch } from './customComponents'\nimport { BasicCheckBox, BasicInput, BasicRadioButton, BasicSelect, BasicTextarea } from 'basic-inputs'\n\nexport { FormProvider } from './FormProvider'\nexport { FieldComponent } from './FieldComponent'\n\n/**\n * Export of the Basic Input Components connected.\n */\nexport const Input = Connect( BasicInput )\nexport const Select = Connect( BasicSelect )\nexport const CheckBox = Connect( BasicCheckBox )\nexport const RadioButton = Connect( BasicRadioButton )\nexport const Textarea = Connect( BasicTextarea )\n\nexport const Switch = Connect( BasicSwitch )\nexport const RadioSwitch = Connect( BasicRadioSwitch )\n\nexport { BasicRadioButton }// from 'components/BasicRadioButton'\nexport { Connect }// from 'components/FormProvider'\n","/**\n * Add elements from newErrors to errorsBuffer. Each element is addad only if\n * is absent in the errorsBuffer.\n * @param  {Array} errorsBuffer - array of unique errors ids\n * @param  {Array} newErrors - array of unique errors ids to add to errorsBuffer\n * @return {Array]} - combined array of errors\n */\nexport const combineArrays = ( errorsBuffer, newErrors ) => {\n  const nextErrors = [].concat( errorsBuffer )\n\n  // Add only errors are not in the list yet\n  newErrors.forEach( errId => {\n    if( !~errorsBuffer.indexOf( errId )){\n    // ref: https://www.joezimjs.com/javascript/great-mystery-of-the-tilde/\n      nextErrors.push( errId )\n    }\n  })\n\n  return nextErrors\n}\n","export { combineArrays } from './combineArrays'\nexport { isObjectsEqual } from './isObjectsEqual'\nexport { logger } from './logger'\n","/**\n * isObjectsEqual Deeply chack two objects for equality\n * idea: https://stackoverflow.com/a/16788517\n * @param  {Object}  x - the first object to compare\n * @param  {Object}  y - the second object to compare\n * @return {Boolean} - true when objects equal, false in another case\n */\nexport function isObjectsEqual( x, y ){\n  if( x === null || x === undefined || y === null || y === undefined ){ return x === y }\n\n  // after this just checking type of one would be enough\n  if( x.constructor !== y.constructor ){ return false }\n\n  // if they are functions, they should exactly refer to same one (because of closures)\n  if( x instanceof Function ){ return x === y }\n\n  // if they are regexps, they should exactly refer to same one (it is hard to better equality check on current ES)\n  if( x instanceof RegExp ){ return x === y }\n  if( x === y || x.valueOf() === y.valueOf()){ return true }\n  if( Array.isArray( x ) && x.length !== y.length ){ return false }\n\n  // if they are dates, they must had equal valueOf\n  if( x instanceof Date ){ return false }\n\n  // if they are strictly equal, they both need to be object at least\n  if( !( x instanceof Object )){ return false }\n  if( !( y instanceof Object )){ return false }\n\n  // recursive object equality check\n  var p = Object.keys( x )\n  return Object.keys( y ).every( function( i ){ return p.indexOf( i ) !== -1 })\n        && p.every( function( i ){ return isObjectsEqual( x[i], y[i]) })\n}\n","const logStyle = 'background: #222; color: #bada55'\n\nexport function logger( ...params ){\n  // eslint-disable-next-line\n  console.log(`%c${this.constructor.name}`, logStyle, ...params)\n}\n","module.exports = __WEBPACK_EXTERNAL_MODULE_react__;"],"sourceRoot":""}